# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id = 0

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners = CLIENT://kafka:9093,INTERNAL://kafka:9094,TOKEN://kafka:9095

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
listener.security.protocol.map = CLIENT:SASL_SSL,INTERNAL:SASL_SSL,TOKEN:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads = 3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads = 8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes = 102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes = 102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes = 104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs = /kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions = 1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir = 1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor = 1
transaction.state.log.replication.factor = 1
transaction.state.log.min.isr = 1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours = 168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes = 1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms = 300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect = zookeeper:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms = 18000

##################### Confluent Metrics Reporter #######################
# Confluent Control Center and Confluent Auto Data Balancer integration
#
# Uncomment the following lines to publish monitoring data for
# Confluent Control Center and Confluent Auto Data Balancer
# If you are using a dedicated metrics cluster, also adjust the settings
# to point to your metrics kakfa cluster.
metric.reporters = io.confluent.metrics.reporter.ConfluentMetricsReporter
# Use INTERNAL listener
confluent.metrics.reporter.bootstrap.servers = kafka:9094
confluent.metrics.reporter.security.protocol = SASL_SSL
confluent.metrics.reporter.ssl.truststore.location=/home/training/rbac/security/tls/kafka-client/kafka-client.truststore.jks
confluent.metrics.reporter.ssl.truststore.password=confluent
confluent.metrics.reporter.sasl.mechanism = PLAIN
confluent.metrics.reporter.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka" password=${securepass:/home/training/rbac/security/secrets/secrets.properties:server.properties/confluent.metrics.reporter.sasl.jaas.config/org.apache.kafka.common.security.plain.PlainLoginModule/password};
#
# Uncomment the following line if the metrics cluster has a single broker
confluent.metrics.reporter.topic.replicas = 1

##################### Confluent Proactive Support ###################### 
# If set to true, and confluent-support-metrics package is installed
# then the feature to collect and report support metrics
# ("Metrics") is enabled.  If set to false, the feature is disabled.
#
confluent.support.metrics.enable = true


# The customer ID under which support metrics will be collected and
# reported.
#
# When the customer ID is set to "anonymous" (the default), then only a
# reduced set of metrics is being collected and reported.
#
# Confluent customers
# -------------------
# If you are a Confluent customer, then you should replace the default
# value with your actual Confluent customer ID.  Doing so will ensure
# that additional support metrics will be collected and reported.
#
confluent.support.customer.id = anonymous

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms = 0


############################# Confluent Authorizer Settings  #############################

# Uncomment to enable Confluent Authorizer with support for ACLs, LDAP groups and RBAC
#authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
# Semi-colon separated list of super users in the format <principalType>:<principalName>
#super.users=
# Specify a valid Confluent license. By default free-tier license will be used
#confluent.license=
# Replication factor for the topic used for licensing. Default is 3.
confluent.license.topic.replication.factor = 1

# Uncomment the following lines and specify values where required to enable CONFLUENT provider for RBAC and centralized ACLs
# Enable CONFLUENT provider 
#confluent.authorizer.access.rule.providers=ZK_ACL,CONFLUENT
# Bootstrap servers for RBAC metadata. Must be provided if this broker is not in the metadata cluster
#confluent.metadata.bootstrap.servers=PLAINTEXT://localhost:9092
# Replication factor for the metadata topic used for authorization. Default is 3.
confluent.metadata.topic.replication.factor = 1

# Listeners for metadata server
#confluent.metadata.server.listeners=http://localhost:8090
# Advertised listeners for metadata server
#confluent.metadata.server.advertised.listeners=http://127.0.0.1:8090



# ----- Kafka Client Transport Encryption ----- #

ssl.keystore.location=/home/training/rbac/security/tls/kafka/kafka.keystore.p12
ssl.keystore.type=PKCS12
ssl.keystore.password=confluent
ssl.key.password=confluent



# ----- SASL Kafka Client Authentication ----- #

sasl.enabled.mechanisms = PLAIN,OAUTHBEARER

# ----- Kafka Client LDAP Authentication over SASL PLAIN-----#
# Configure client listener, defined earlier with the name CLIENT (hence listener.name.**client**)
listener.name.client.sasl.enabled.mechanisms = PLAIN
listener.name.client.plain.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required;
listener.name.client.plain.sasl.server.callback.handler.class = io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler

ldap.java.naming.provider.url = ldaps://directory-service:10636
# Enable SSL for connections to LDAP server
ldap.java.naming.security.protocol = SSL
# Path of truststore for LDAPS connections
ldap.ssl.truststore.location = /home/training/rbac/security/tls/kafka/kafka.truststore.jks
# Password of LDAPS truststore
ldap.ssl.truststore.password = ${securepass:/home/training/rbac/security/secrets/secrets.properties:server.properties/ldap.ssl.truststore.password}
# Authenticate to LDAP
ldap.java.naming.security.principal = uid=admin,ou=system
ldap.java.naming.security.credentials = secret
ldap.java.naming.security.authentication = simple
# Locate users
ldap.user.search.base = ou=users,dc=confluent,dc=io
ldap.user.name.attribute = uid
ldap.user.object.class = inetOrgPerson

## IMPORTANT: this setting disables simple bind. Don't use it unless your ldap server disables simple bind
#ldap.user.password.attribute=userPassword


# Internal broker to broker commnication.
# Must set a separate inter broker listener for brokers running MDS.
# Listener itself is defined earlier in the socket section,called INTERNAL.
# This is a single node cluster, so the internal listener is unnecessary,
#  but in a typical environment with multiple brokers it would be necessary.
inter.broker.listener.name = INTERNAL
ssl.truststore.location=/home/training/rbac/security/tls/kafka/kafka.truststore.jks
ssl.truststore.password=confluent
sasl.mechanism.inter.broker.protocol = PLAIN
listener.name.internal.sasl.enabled.mechanisms = PLAIN
listener.name.internal.plain.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka" password=${securepass:/home/training/rbac/security/secrets/secrets.properties:server.properties/listener.name.internal.plain.sasl.jaas.config/org.apache.kafka.common.security.plain.PlainLoginModule/password} user_kafka="kafka-secret" user_mds="mds-secret";
#listener.name.internal.plain.sasl.server.callback.handler.class=io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler

# ----- Everything above this point is for AuthN and transport encryption ----- #
# ----- Everything below this point is for AuthZ with RBAC ----- #

# ----- Confluent Authorizer ----- #
authorizer.class.name = io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
confluent.authorizer.access.rule.providers = ZK_ACL,CONFLUENT
super.users = User:kafka;User:mds;User:super-user

# ----- MDS Token Service for REST Client Impersonation ----- #

# Configure TOKEN listener used by Confluent components for impersonation
confluent.metadata.server.token.key.path = /home/training/rbac/security/token/tokenKeypair.pem
listener.name.token.sasl.enabled.mechanisms = OAUTHBEARER
listener.name.token.oauthbearer.sasl.server.callback.handler.class = io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
listener.name.token.oauthbearer.sasl.login.callback.handler.class = io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler
listener.name.token.oauthbearer.sasl.jaas.config = org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required publicKeyPath="/home/training/rbac/security/token/public.pem";

# ----- MDS Server ----- #

# confluent.metadata.server.advertised.listeners=http://localhost:8090
confluent.metadata.server.listeners = https://mds:8090
confluent.metadata.server.authentication.method = BEARER
confluent.metadata.server.ssl.keystore.location = /home/training/rbac/security/tls/mds/mds.keystore.p12
confluent.metadata.server.ssl.keystore.type = PKCS12
confluent.metadata.server.ssl.keystore.password = ${securepass:/home/training/rbac/security/secrets/secrets.properties:server.properties/confluent.metadata.server.ssl.keystore.password}
confluent.metadata.server.ssl.key.password = ${securepass:/home/training/rbac/security/secrets/secrets.properties:server.properties/confluent.metadata.server.ssl.key.password}
# Include truststore so MDS can contact brokers over SSL to produce/consume metadata messages
# Is this true^^^? Or is the mds truststore only used for http client mtls?
confluent.metadata.server.ssl.truststore.location=/home/training/rbac/security/tls/mds/mds.truststore.jks
confluent.metadata.server.ssl.truststore.password=confluent


# ----- LDAP Groups for Group Based AuthZ ----- #
ldap.search.mode = GROUPS
ldap.group.search.base = ou=groups,dc=confluent,dc=io
ldap.group.object.class = groupOfNames
ldap.group.name.attribute = cn
ldap.group.member.attribute = member
ldap.group.member.attribute.pattern = cn=(.*),ou=users,dc=confluent,dc=io
config.providers = securepass
config.providers.securepass.class = io.confluent.kafka.security.config.provider.SecurePassConfigProvider
